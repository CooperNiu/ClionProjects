Index: main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.cpp	(date 1480418079000)
+++ main.cpp	(revision )
@@ -1,6 +1,6 @@
 #include <iostream>
 
 int main() {
-    std::cout << "Hello, World!" << std::endl;
+
     return 0;
 }
\ No newline at end of file
Index: HuffmanTree.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- HuffmanTree.cpp	(date 1480418079000)
+++ HuffmanTree.cpp	(revision )
@@ -4,7 +4,17 @@
 
 #include "HuffmanTree.h"
 
-void HuddmanCoding(HuffmanTree &HT, HuffmanCode &HC, int *w, int n){
+void Select(HuffmanTree HT, unsigned int m, unsigned int s1, unsigned int s2){
+    for (int j = 0; j < m; ++j) {
+        if(HT[j].parent == 0){
+            int temp = j;
+            if(HT[j+1].weight>HT[temp].weight){
+                temp = j+1;
+            }
+        }
+    }
+}
+void HuffmanCoding(HuffmanTree &HT, HuffmanCode &HC, int *w, int n){
     // w 存放n个字符权值(均>0), 构造赫夫曼树HT, 并求出n个字符的赫夫曼编码HC
     if(n<=1) return;
     int m=2*n-1; //一棵有n个结点的赫夫曼树共有2n-1个结点, 可以存储在一个一维数组中
@@ -17,6 +27,29 @@
         *p = {0, 0, 0, 0};
     }
     for (int j=n+1; j<=m ; ++j) {
-        
+        unsigned int s1, s2, i;
+        Select(HT,i-1,s1,s2);
+        HT[s1].parent=i; HT[s2].parent=i;
+        HT[i].lchild=s1; HT[i].rchild=s2;
+        HT[i].weight=HT[s1].weight+HT[s2].weight;
     }
+    HC=(HuffmanCode)malloc((n+1)*sizeof(char*));
+    char *cd=(char *)malloc(n*sizeof(char));   cd[n-1]='\0';
+    for(int i=1;i<=n;++i)
+    {   int start=n-1;
+        for(int c=i,f=HT[i].parent;f!=0;c=f,f=HT[f].parent)
+        {
+            if(HT[f].lchild==c)
+            {
+                --start;  cd[start]='0';
+            }
+            else
+            {
+                --start;  cd[start]='1';
+            }
+        }//for
+        HC[i]=(char*)malloc((n-start)*sizeof(char));
+        strcpy(HC[i],&cd[start]);
+    }
+    free(cd);
 }
\ No newline at end of file
Index: HuffmanTree.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- HuffmanTree.h	(date 1480418079000)
+++ HuffmanTree.h	(revision )
@@ -28,4 +28,5 @@
 typedef char **HuffmanCode; // 动态分配数组存储赫夫曼树编码表
 
 void HuffmanCoding(HuffmanTree &HT, HuffmanCode &HC, int *w, int n);
+void Select(HuffmanTree HT, unsigned int i, unsigned int s1, unsigned int s2);
 #endif //HUFFMANTREE_HUFFMANTREE_H
Index: cmake-build-debug/CMakeFiles/HuffmanTree.dir/depend.make
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cmake-build-debug/CMakeFiles/HuffmanTree.dir/depend.make	(date 1480418079000)
+++ cmake-build-debug/CMakeFiles/HuffmanTree.dir/depend.make	(revision )
@@ -1,2 +1,8 @@
-# Empty dependencies file for HuffmanTree.
-# This may be replaced when dependencies are built.
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "MinGW Makefiles" Generator, CMake Version 3.6
+
+CMakeFiles/HuffmanTree.dir/HuffmanTree.cpp.obj: ../HuffmanTree.cpp
+CMakeFiles/HuffmanTree.dir/HuffmanTree.cpp.obj: ../HuffmanTree.h
+
+CMakeFiles/HuffmanTree.dir/main.cpp.obj: ../main.cpp
+
